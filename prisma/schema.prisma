// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JodexAdmin {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  company   String   @default("Jodex")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id              String     @id @unique @default(uuid())
  userName        String     @unique
  phoneNumber     String?    @unique
  email           String     @unique
  fullName        String
  password        String
  passwordConfirm String
  picture         String?
  company         String     @default("Jodex")
  createdAT       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  properties      Property[]
  userType        UserType
  rentals         Rental[]   @relation("TenantRentals")
  role            Role       @default(USER)

  // @@map("users")
  Payment Payment[]
}

model Rental {
  id         Int          @id @default(autoincrement())
  propertyId Int
  property   Property     @relation(fields: [propertyId], references: [id])
  tenantId   Int
  tenant     User         @relation("TenantRentals", fields: [tenantId], references: [id])
  status     RentalStatus @default(PENDING)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  payments   Payment[]
}

model Payment {
  id         Int           @id @default(autoincrement())
  rentalId   Int
  rental     Rental        @relation(fields: [rentalId], references: [id])
  amount     Float
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  User       User?         @relation(fields: [userId], references: [id])
  userId     String?
  Property   Property?     @relation(fields: [propertyId], references: [id])
  propertyId String?
}

model Property {
  id          String   @id @unique @default(uuid())
  flat        Int
  unit        Int
  city        String
  state       String
  zipCode     Int
  description String
  rooms       Int
  bath        Int
  kitchen     Int
  diningRoom  Int
  pictures    String
  garage      Boolean
  wifi        Boolean
  houseType   String
  address     String
  createdAT   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     String   @default("Jodex")
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  rentals     Rental[]

  Payment Payment[]
}

enum UserType {
  LANDLORD
  TENANT
  ADMIN
  AGENT
  PROPERTY_MANAGER
}

enum Role {
  USER
  ADMIN
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// model Landlord {
//   id          String   @id @unique @default(uuid())
//   userName    String
//   phoneNumber String?  @unique
//   email       String
//   password    String
//   userId      String   @unique
//   user        User     @relation(fields: [userId], references: [id])
//   // properties  Property[]
//   company     String   @default("Jodex")
//   createdAT   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model Tenant {
//   id          String   @id @unique @default(uuid())
//   userName    String
//   phoneNumber String?  @unique
//   email       String
//   password    String
//   userId      String   @unique
//   user        User     @relation(fields: [userId], references: [id])
//   createdAT   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   company     String   @default("Jodex")
//   Properties  Property @relation(fields: [id], references: [id])
// }

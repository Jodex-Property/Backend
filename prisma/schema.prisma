// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JodexAdmin {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  company   String   @default("Jodex")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id               String     @id @unique @default(uuid())
  avatar           String
  isEmailVerified  Boolean
  profileCompleted Boolean
  userType         UserType
  profilePicture   String?
  userName         String?    @unique
  imageUrl         String?    @unique
  email            String     @unique
  password         String
  userToken        UserToken?
  company          String     @default("Jodex")
  landlord         Landlord?
  tenant           Tenant?    @relation(fields: [tenantId], references: [id])
  createdAt        DateTime?  @default(now())
  updatedAt        DateTime?  @default(now())
  tenantId         String?
}

model UserToken {
  id                 String   @id @unique @default(uuid())
  token              String   @unique
  tokenGeneratedTime DateTime
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  company            String   @default("Jodex")
}

model Landlord {
  id              String           @id @unique @default(uuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  userName        String
  phoneNumber     String           @unique
  email           String
  password        String
  passwordConfirm String
  tenants         LandlordTenant[]
  property        Property[]
  company         String           @default("Jodex")
  createdAT       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Tenant {
  id              String           @id @unique @default(uuid())
  userName        String
  email           String
  password        String
  passwordConfirm String
  landlord        LandlordTenant[]
  // property LandlordProperty
  createdAT       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  User            User[]
  company         String           @default("Jodex")
}

model LandlordTenant {
  id         String   @id @unique @default(uuid())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  landlord   Landlord @relation(fields: [landlordId], references: [id])
  landlordId String
  company    String   @default("Jodex")
}

model Property {
  id         String   @id @unique @default(uuid())
  rooms      Int
  address    String
  landlord   Landlord @relation(fields: [landlordId], references: [id])
  landlordId String
  createdAT  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    String   @default("Jodex")
  // tenant     Tenant   @relation(fields: [tenantId], references: [id])
  // tenantId   String
}

// model LandlordProperty {

// }

enum UserType {
  landlord
  tenant
}
